 * Contents
    
    1. Contents
    2. GitHub
    3. What is it?
    4. Why did I write this?
    5. Benefits
    6. Example Usage
    7. How to Minify
    8. How to Create a "Here Document" in JavaScript

 * GitHub

    http://github.com/superjoe30/jst-parser

 * What is it?

    JavaScript Templates (Jst) is a pure Javascript templating engine that runs
    in your browser using JSP-like syntax. If that doesn't sound familiar, check
    out the live working example:
    http://blog.markturansky.com/BetterJavascriptTemplates.html#example

 * Why did I write this?

    1. TrimPath failed with JSTL errors when running in Jetty with default
       settings.
    2. TrimPath isn't pure Javascript*. I think Velocity's syntax is terrible.
       I wanted JSP-like syntax.
    3. Embeddedjs failed to retrieve a template from within an Ajax call.
       That is, I was already using Ajax within a drag n' drop scriptaculous
       function call, so embeddedjs couldn't use Ajax to retrieve the template
       from the server.
    4. I wanted the templates stored in the page anyway, like TrimPath, not on
       the server.
    5. Neither Embeddedjs nor TrimPath linted well, so they can't be minified.
       The download for embeddedjs is 2.5X that of my Jst implementation and
       TrimPath is 3.5X as big!
    6. I already wrote the parser years ago in Java for server-side Javascript.
       It was easy to port to JS.

        * Right from TrimPath's homepage:

            ${p.name|capitalize}

        What is that? Better to put the capitalize method on the String
        prototype and do this:

            <%= p.name.capitlize() %>

        You get the benefit of having a better String object and you don't
        have to learn a one-off syntax.

 * Benefits

    1. Only 5k minified!
    2. Pure Javascript with JSP syntax.
    3. Works within Ajax calls.
    4. Doesn't conflict with JSTL on the server.
    5. One line renders the template (see the one liner below).
    6. Only ~250 lines of executable code, and I haven't looked to refactor it
       to make it smaller. It works well. If it ain't broke...

 * Example usage

    // src: string containing template code
    // data: dictionary with values your template needs
    // return value: the processed template
    // Jst.evaluate(template, data);

    var template = '<h1>hi</h1><p>foo is <%=foo%></p>';
    document.getElementById("output").innerHTML =
        Jst.evaluate(template, {"foo":"yarrr"});

 * How to minify

    1. Run the code through http://www.jslint.com/ and clean up.
    2. Download JSMin from http://www.crockford.com/javascript/jsmin.html.
    3. Download the .c file and compile for your platform. On linux:
       wget http://www.crockford.com/javascript/jsmin.c
       gcc -o jsmin jsmin.c
    4. It takes standard input and writes to standard output. So on linux:
       ./jsmin <jstparser.js >jstparser_min.js

 * How to create a "here document" in JavaScript:

    var string = (<r><![CDATA[

        The text string goes here.  Since this is a XML CDATA section,
        stuff like <> work fine too, even if definitely invalid XML.

        This is where you would put your templates pre-parsing. If using
        a web framework like Django, you could have an
        {% include 'template.html' %} here.

    ]]></r>).toString();

    http://mook.wordpress.com/2005/10/30/multi-line-strings-in-javascript/

